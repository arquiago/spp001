---
// src/pages/index.astro
import MainLayout from '../layouts/MainLayout.astro';
---
<MainLayout pageTitle="Plato & Platonism Seminar">
  <main class="hero">
    <video autoplay loop muted playsinline class="hero-video">
      <source src="/hero-video.mp4" type="video/mp4" />
    </video>

    <div class="hero-content">
      <h1>Seminário de Platão & Platonismo</h1>
      <p>na Universidade de Brasília</p>
    </div>
  </main>
</MainLayout>

<style>
  /* All the styles for the hero section remain here */
  .hero {
    position: relative;
    height: 100vh;
    display: grid;
    grid-template-columns: 1fr 1fr; /* Two equal columns */
    align-items: center;
    color: white;
    overflow: hidden;
  }

  .hero-video {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transform: translate(-50%, -50%);
    z-index: -2;
  }
  .hero-content {
    background-color: rgba(0, 0, 0, 0);
    padding: 2rem;
    border-radius: 8px;
    z-index: 1;
    margin-left: 4rem; /* Position in first column */
    text-align: left;
  }
  
  h1 { font-size: 3rem; }
  p { font-size: 1.5rem; }

    /* ADD THESE NEW RULES */
    .hero-content h1, .hero-content p {
    /* 1. Make the text invisible and slightly moved down */
    opacity: 0;
    transform: translateY(20px);
    
    /* 2. Define the animation that will run when properties change */
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }

  /* Add a slight delay to the paragraph for a staggered effect */
  .hero-content p {
    transition-delay: 0.2;
  }
  /* ADD THIS RULE */
  .hero-content.is-visible h1,
  .hero-content.is-visible p {
    opacity: 1;
    transform: translateY(0);
  }
</style>


<script>
  // Find the text container element
  const heroContent = document.querySelector('.hero-content');
  
  if (heroContent) {
    // Create an Intersection Observer
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // Element is visible, trigger the animation after a delay
          setTimeout(() => {
            entry.target.classList.add('is-visible');
          }, 1200); // 800ms delay - adjust as needed
          // Stop observing this element since we only want to trigger once
          observer.unobserve(entry.target);
        }
      });
    }, {
      // Optional: trigger when 50% of the element is visible
      threshold: 0.5,
      // Optional: add some margin to trigger slightly before/after
      rootMargin: '0px 0px -50px 0px'
    });
    
    // Start observing the hero content
    observer.observe(heroContent);
  }
  </script>